1
00:00:00,000 --> 00:00:03,734
[MUSIC PLAYING]

2
00:00:03,734 --> 00:00:06,069


3
00:00:06,069 --> 00:00:07,360
ERIC BIDELMAN: All right.

4
00:00:07,360 --> 00:00:08,300
Welcome, everybody.

5
00:00:08,300 --> 00:00:10,570
Thanks for sticking
around during lunch time.

6
00:00:10,570 --> 00:00:12,580
We're going to talk about
some cool, cool stuff.

7
00:00:12,580 --> 00:00:14,320
Talk about Lighthouse
and how you

8
00:00:14,320 --> 00:00:17,731
can build seaworthy progressive
web apps for the web.

9
00:00:17,731 --> 00:00:19,940
[APPLAUSE]

10
00:00:19,940 --> 00:00:21,240
So my name is Eric Bidelman.

11
00:00:21,240 --> 00:00:22,750
This is Brendan Kenny.

12
00:00:22,750 --> 00:00:25,000
We are both on the Developer
Relations team at Google.

13
00:00:25,000 --> 00:00:27,370
We focus on Chrome and
web, and we basically

14
00:00:27,370 --> 00:00:30,550
just give presentations,
help developers

15
00:00:30,550 --> 00:00:33,340
use web technologies, build
tools, build libraries,

16
00:00:33,340 --> 00:00:35,290
build things like
Lighthouse that hopefully

17
00:00:35,290 --> 00:00:37,570
will make your life easier.

18
00:00:37,570 --> 00:00:40,330
Fun fact about me is
that I'm from Michigan.

19
00:00:40,330 --> 00:00:42,250
So I point to where
I'm from on my hand.

20
00:00:42,250 --> 00:00:43,840
Go Blue.

21
00:00:43,840 --> 00:00:45,670
And Michigan actually
self-proclaims

22
00:00:45,670 --> 00:00:47,410
to have the most
number of lighthouses

23
00:00:47,410 --> 00:00:48,677
of any state in the country.

24
00:00:48,677 --> 00:00:50,260
So you're basically
never going to run

25
00:00:50,260 --> 00:00:52,730
into any shoreline in Michigan
because we are well, well

26
00:00:52,730 --> 00:00:54,520
protected.

27
00:00:54,520 --> 00:00:57,160
Fun fact about Brendan is that
he wrote this really, really

28
00:00:57,160 --> 00:00:59,657
cool demo back in, what, 2010?

29
00:00:59,657 --> 00:01:00,490
BRENDAN KENNY: Yeah.

30
00:01:00,490 --> 00:01:02,811
ERIC BIDELMAN: And it uses,
what, CSS 2D transforms?

31
00:01:02,811 --> 00:01:04,019
BRENDAN KENNY: 2D transforms.

32
00:01:04,019 --> 00:01:05,185
ERIC BIDELMAN: Why does it--

33
00:01:05,185 --> 00:01:07,690
BRENDAN KENNY: We only had 3D
on the iPhone, at the time.

34
00:01:07,690 --> 00:01:09,314
Everybody else was
still stuck in the--

35
00:01:09,314 --> 00:01:11,930
ERIC BIDELMAN: So 2010, not
a lot of support for GPU

36
00:01:11,930 --> 00:01:13,365
and awesome stuff like that.

37
00:01:13,365 --> 00:01:14,740
But there's this
really cool part

38
00:01:14,740 --> 00:01:16,570
here where you click this
button that says don't click.

39
00:01:16,570 --> 00:01:19,080
And, of course, when you do,
there's this inception moment.

40
00:01:19,080 --> 00:01:20,215
We got really
excited about this,

41
00:01:20,215 --> 00:01:22,540
and we actually hired Brendan
because we saw this demo.

42
00:01:22,540 --> 00:01:24,435
BRENDAN KENNY: I have done
some things since 2010--

43
00:01:24,435 --> 00:01:24,940
ERIC BIDELMAN: That's right.

44
00:01:24,940 --> 00:01:25,630
BRENDAN KENNY: --until now.

45
00:01:25,630 --> 00:01:27,921
ERIC BIDELMAN: Well, speaking
of, we both actually work

46
00:01:27,921 --> 00:01:29,170
on Santa Tracker every year.

47
00:01:29,170 --> 00:01:31,480
This is something that
launches on google.com.

48
00:01:31,480 --> 00:01:33,425
It's kind of fun.

49
00:01:33,425 --> 00:01:34,630
It's a PWA.

50
00:01:34,630 --> 00:01:36,650
It uses all the latest
web technologies.

51
00:01:36,650 --> 00:01:38,720
So it's Polymer web components.

52
00:01:38,720 --> 00:01:40,570
It's got a service worker.

53
00:01:40,570 --> 00:01:42,404
There are these games
that launch every day.

54
00:01:42,404 --> 00:01:44,528
This is one of my favorites,
where you can actually

55
00:01:44,528 --> 00:01:45,880
give Santa a little shave.

56
00:01:45,880 --> 00:01:46,825
And he's totally cool with it.

57
00:01:46,825 --> 00:01:47,325
He's Santa.

58
00:01:47,325 --> 00:01:48,400
He's a jolly guy.

59
00:01:48,400 --> 00:01:50,165
BRENDAN KENNY: It's
Santa's gift to you.

60
00:01:50,165 --> 00:01:51,373
ERIC BIDELMAN: That's brutal.

61
00:01:51,373 --> 00:01:52,100
BRENDAN KENNY: Let
him give you a--

62
00:01:52,100 --> 00:01:52,810
ERIC BIDELMAN: But
that's a fun one.

63
00:01:52,810 --> 00:01:55,450
And we do this because
we want to not only build

64
00:01:55,450 --> 00:01:58,180
real stuff on our team, but
we also want open source it

65
00:01:58,180 --> 00:02:01,930
and have people learn from
these apps that we build.

66
00:02:01,930 --> 00:02:04,450
But today, we're here to
talk to you about Lighthouse.

67
00:02:04,450 --> 00:02:07,270
And so Lighthouse is a
tool for web developers

68
00:02:07,270 --> 00:02:10,060
that helps you improve the
quality of your web app,

69
00:02:10,060 --> 00:02:14,440
not just PWA, but general
web best practices.

70
00:02:14,440 --> 00:02:16,750
And it's also for maintaining
the quality of your app

71
00:02:16,750 --> 00:02:19,125
because I think maintenance
is actually really important.

72
00:02:19,125 --> 00:02:21,560
You want to have the ability
to take in pull requests

73
00:02:21,560 --> 00:02:24,730
from a community, but also
ensure that your app is fast,

74
00:02:24,730 --> 00:02:27,550
always stays fast, and it
meets the Progressive Web App

75
00:02:27,550 --> 00:02:28,940
requirements.

76
00:02:28,940 --> 00:02:30,190
You don't want to be this guy.

77
00:02:30,190 --> 00:02:32,050
This was actually
me back in January,

78
00:02:32,050 --> 00:02:34,510
where I did a push
to an App Engine app.

79
00:02:34,510 --> 00:02:37,630
My latency rose, like, 2x to
4x because I was doing way too

80
00:02:37,630 --> 00:02:39,190
many database queries.

81
00:02:39,190 --> 00:02:40,270
Totally just a boo-boo.

82
00:02:40,270 --> 00:02:42,077
It was a mistake,
but I fixed it.

83
00:02:42,077 --> 00:02:43,660
You can see where
the graph went down.

84
00:02:43,660 --> 00:02:44,140
BRENDAN KENNY: Yeah.

85
00:02:44,140 --> 00:02:44,770
ERIC BIDELMAN: But
wouldn't it be nice

86
00:02:44,770 --> 00:02:47,600
if there was a tool to help
us prevent mistakes like this?

87
00:02:47,600 --> 00:02:48,190
BRENDAN KENNY: If
only there was a way

88
00:02:48,190 --> 00:02:48,910
to automate this whole thing.

89
00:02:48,910 --> 00:02:49,810
ERIC BIDELMAN: If
only there was a way.

90
00:02:49,810 --> 00:02:50,652
BRENDAN KENNY: Yeah.

91
00:02:50,652 --> 00:02:52,360
ERIC BIDELMAN: You've
probably also heard

92
00:02:52,360 --> 00:02:55,090
about Progressive Web Apps
here at I/O and probably even

93
00:02:55,090 --> 00:02:56,050
before that.

94
00:02:56,050 --> 00:02:59,350
So let's say you want to go
down this journey of building

95
00:02:59,350 --> 00:03:01,000
a progressive web app.

96
00:03:01,000 --> 00:03:02,800
You've probably seen
our documentation over

97
00:03:02,800 --> 00:03:04,837
on developers.google.com.

98
00:03:04,837 --> 00:03:06,670
And essentially, there's
just a lot of stuff

99
00:03:06,670 --> 00:03:09,310
you have to think about if
you want to build a PWA.

100
00:03:09,310 --> 00:03:11,360
And it's all kind
of a manual process.

101
00:03:11,360 --> 00:03:13,780
You have to serve
your site over SSL.

102
00:03:13,780 --> 00:03:15,910
You have to have a
service worker for offline

103
00:03:15,910 --> 00:03:18,380
and all that entails.

104
00:03:18,380 --> 00:03:21,840
Responsive, Add to Home
Screen, are you fast on 3G?

105
00:03:21,840 --> 00:03:24,280
If you actually just go
and scroll this page,

106
00:03:24,280 --> 00:03:25,240
that's daunting.

107
00:03:25,240 --> 00:03:28,039
There's just a lot of things
that you have to think about.

108
00:03:28,039 --> 00:03:30,580
Again, wouldn't it be nice if
there was a tool to help us out

109
00:03:30,580 --> 00:03:33,130
with some of this stuff?

110
00:03:33,130 --> 00:03:34,637
Turns out tools are nothing new.

111
00:03:34,637 --> 00:03:36,220
They've existed for
thousands of years

112
00:03:36,220 --> 00:03:37,428
in many different industries.

113
00:03:37,428 --> 00:03:39,716
We have road signs to
help us navigate the road

114
00:03:39,716 --> 00:03:40,840
and to give us information.

115
00:03:40,840 --> 00:03:45,280
We have lighthouses to
help ships at sea guide

116
00:03:45,280 --> 00:03:47,020
and stay away from
the coastline.

117
00:03:47,020 --> 00:03:48,760
So we said, hey, this
is a great model.

118
00:03:48,760 --> 00:03:50,593
Why don't we take this
and build a tool that

119
00:03:50,593 --> 00:03:52,700
does this for web developers?

120
00:03:52,700 --> 00:03:55,720
So we kind of reworded the
definition of lighthouse

121
00:03:55,720 --> 00:03:57,280
for web developers.

122
00:03:57,280 --> 00:03:59,530
So Lighthouse is
a beacon of light

123
00:03:59,530 --> 00:04:01,546
that guides web developers.

124
00:04:01,546 --> 00:04:02,670
Nothing more, nothing less.

125
00:04:02,670 --> 00:04:04,360
It keeps you on the fast path.

126
00:04:04,360 --> 00:04:06,470
It allows you to know
your site's accessible

127
00:04:06,470 --> 00:04:09,510
and that you're using best
practices, that you're PWA,

128
00:04:09,510 --> 00:04:13,560
and that you're performant.

129
00:04:13,560 --> 00:04:16,019
Last year, Paul Irish, who's
sitting in the front row

130
00:04:16,019 --> 00:04:17,839
right here-- what's up, Paul?

131
00:04:17,839 --> 00:04:19,380
BRENDAN KENNY: He
looks pretty young.

132
00:04:19,380 --> 00:04:20,543
ERIC BIDELMAN: Yeah.

133
00:04:20,543 --> 00:04:21,959
He actually
introduced Lighthouse.

134
00:04:21,959 --> 00:04:24,300
And back then, we were
basically just a bunch

135
00:04:24,300 --> 00:04:26,940
of automated checks for
Progressive Web Apps.

136
00:04:26,940 --> 00:04:30,580
We had a really sweet fancy
logo done in MS Paint,

137
00:04:30,580 --> 00:04:33,840
as every alpha project
should have at the time.

138
00:04:33,840 --> 00:04:36,030
But we've done a lot
of work since then.

139
00:04:36,030 --> 00:04:38,560
Today, we're talking
about Lighthouse 2.0.

140
00:04:38,560 --> 00:04:41,640
So a year later, the open source
project is still open source,

141
00:04:41,640 --> 00:04:45,060
but we have a bunch of
new stuff in Lighthouse.

142
00:04:45,060 --> 00:04:47,070
So we still have the
Progressive Web App checks.

143
00:04:47,070 --> 00:04:48,360
Lighthouse will just
go through your site,

144
00:04:48,360 --> 00:04:50,100
and we'll demo it
in a little second,

145
00:04:50,100 --> 00:04:53,266
and tell you what you need to
do to be a Progressive Web App.

146
00:04:53,266 --> 00:04:54,640
But we have a ton
of other stuff.

147
00:04:54,640 --> 00:04:55,590
So best practices.

148
00:04:55,590 --> 00:04:57,570
Are you using the
latest and greatest

149
00:04:57,570 --> 00:04:59,130
best practices on the web?

150
00:04:59,130 --> 00:05:00,600
So as the web
continues to evolve,

151
00:05:00,600 --> 00:05:02,820
Lighthouse will adopt
these new practices

152
00:05:02,820 --> 00:05:05,730
and then write audits for them.

153
00:05:05,730 --> 00:05:06,960
Is your site performant?

154
00:05:06,960 --> 00:05:08,730
It's great to have a
progressive web app,

155
00:05:08,730 --> 00:05:10,260
but if it's not
performant, no one's

156
00:05:10,260 --> 00:05:12,150
going to come back and
use that experience.

157
00:05:12,150 --> 00:05:15,312
So we have a ton of new
stuff for performance.

158
00:05:15,312 --> 00:05:16,770
And lastly, there's
a whole section

159
00:05:16,770 --> 00:05:18,325
dedicated to accessibility.

160
00:05:18,325 --> 00:05:19,950
I'll be the first to
admit that I often

161
00:05:19,950 --> 00:05:22,180
forget about accessibility
when I build things.

162
00:05:22,180 --> 00:05:23,060
But no more.

163
00:05:23,060 --> 00:05:26,970
Lighthouse can basically
guide you through this process

164
00:05:26,970 --> 00:05:29,400
and tell you what
you're missing.

165
00:05:29,400 --> 00:05:31,860
We also have a fancy new
logo, which is animated,

166
00:05:31,860 --> 00:05:34,830
and an awesome new
Twitter handle with four--

167
00:05:34,830 --> 00:05:35,790
four underscores.

168
00:05:35,790 --> 00:05:37,270
That's really important.

169
00:05:37,270 --> 00:05:38,190
BRENDAN KENNY: Yeah,
don't forget that.

170
00:05:38,190 --> 00:05:39,090
ERIC BIDELMAN: I don't
know why we did that.

171
00:05:39,090 --> 00:05:39,830
But anyway.

172
00:05:39,830 --> 00:05:42,330
BRENDAN KENNY: And yet, on the
first day that we created it,

173
00:05:42,330 --> 00:05:43,650
it had more followers than me.

174
00:05:43,650 --> 00:05:45,490
That's not fair.

175
00:05:45,490 --> 00:05:47,430
ERIC BIDELMAN: Everybody
go follow Brendan.

176
00:05:47,430 --> 00:05:49,180
But with that, I guess
that's enough talk.

177
00:05:49,180 --> 00:05:51,630
Let's go ahead and just demo
and show off Lighthouse, what

178
00:05:51,630 --> 00:05:52,720
you get in a Lighthouse report.

179
00:05:52,720 --> 00:05:53,115
BRENDAN KENNY: Yeah.

180
00:05:53,115 --> 00:05:53,920
Let's try it out.

181
00:05:53,920 --> 00:05:55,870
So if we can switch
to the-- perfect.

182
00:05:55,870 --> 00:05:56,370
OK.

183
00:05:56,370 --> 00:05:58,800
So if you've been over
to the Mobile Web tent,

184
00:05:58,800 --> 00:06:00,300
you'll have seen a
giant Lighthouse,

185
00:06:00,300 --> 00:06:01,780
and this is the page
that runs on it.

186
00:06:01,780 --> 00:06:02,529
It's a simple app.

187
00:06:02,529 --> 00:06:04,470
You put in a URL
in this text box

188
00:06:04,470 --> 00:06:06,900
and it goes and tests your app.

189
00:06:06,900 --> 00:06:08,910
So we've done a simulation here.

190
00:06:08,910 --> 00:06:12,090
Maybe marketing asked
for some tracking scripts

191
00:06:12,090 --> 00:06:14,130
and maybe, I don't
know, business dev

192
00:06:14,130 --> 00:06:16,420
wanted some extra features here.

193
00:06:16,420 --> 00:06:19,060
And as a result, your page
load has gotten a little slow.

194
00:06:19,060 --> 00:06:20,610
So let's load the page.

195
00:06:20,610 --> 00:06:22,897
And I want to use it, so
I start typing in a URL.

196
00:06:22,897 --> 00:06:24,480
But as you can see,
it's still loading

197
00:06:24,480 --> 00:06:26,580
and, oh, it just
erased my progress

198
00:06:26,580 --> 00:06:29,220
because some JavaScript
loaded and made it work.

199
00:06:29,220 --> 00:06:32,410
So we want to benchmark
this in Lighthouse.

200
00:06:32,410 --> 00:06:34,435
The most popular
way so far has been

201
00:06:34,435 --> 00:06:36,060
through the Lighthouse
extension, which

202
00:06:36,060 --> 00:06:37,650
is in the Chrome Web Store.

203
00:06:37,650 --> 00:06:40,440
And we can go up here,
and it's a simple click

204
00:06:40,440 --> 00:06:42,320
to get Lighthouse started.

205
00:06:42,320 --> 00:06:45,510
It'll actually clear things
out, try and load this

206
00:06:45,510 --> 00:06:49,740
as a mobile device would,
throttling network, even

207
00:06:49,740 --> 00:06:52,980
throttling the CPU to
try and simulate that.

208
00:06:52,980 --> 00:06:55,050
And it refreshes
a few times so it

209
00:06:55,050 --> 00:06:58,110
can take a look, like
does it work offline?

210
00:06:58,110 --> 00:07:00,030
Does it work with a clear load?

211
00:07:00,030 --> 00:07:02,160
How does the accessibility look?

212
00:07:02,160 --> 00:07:04,290
And then here, you
can see the checklist

213
00:07:04,290 --> 00:07:06,120
that Eric went through before.

214
00:07:06,120 --> 00:07:08,490
So at the top is the
Progressive Web App

215
00:07:08,490 --> 00:07:11,810
checklist, how your site has
done as a Progressive Web App.

216
00:07:11,810 --> 00:07:14,070
And you can see that here's
four things that we still

217
00:07:14,070 --> 00:07:15,890
need to do.

218
00:07:15,890 --> 00:07:18,600
Get a service worker
is a big one and maybe

219
00:07:18,600 --> 00:07:19,630
work on our security.

220
00:07:19,630 --> 00:07:21,713
But we have seven things
that we're already doing,

221
00:07:21,713 --> 00:07:23,640
so we're doing OK and
we weren't even trying.

222
00:07:23,640 --> 00:07:24,690
ERIC BIDELMAN: We're
doing some stuff, yeah.

223
00:07:24,690 --> 00:07:25,020
BRENDAN KENNY: Yeah, yeah.

224
00:07:25,020 --> 00:07:26,061
ERIC BIDELMAN: It's good.

225
00:07:26,061 --> 00:07:28,460
BRENDAN KENNY: So next up
is the performance section.

226
00:07:28,460 --> 00:07:31,230
And here, you can
see a great breakdown

227
00:07:31,230 --> 00:07:33,320
of some really key metrics
that have been talked

228
00:07:33,320 --> 00:07:35,100
a bit about at the
show so far and we're

229
00:07:35,100 --> 00:07:37,840
going to talk a little bit
more about in a little while.

230
00:07:37,840 --> 00:07:40,006
But you can see them in
context with the screenshots

231
00:07:40,006 --> 00:07:41,160
of the page load.

232
00:07:41,160 --> 00:07:43,410
And down here, accessibility.

233
00:07:43,410 --> 00:07:45,455
Accessibility is a great
one that a lot of people

234
00:07:45,455 --> 00:07:46,830
feel like they
have to be experts

235
00:07:46,830 --> 00:07:51,001
before they even start on making
their site properly accessible.

236
00:07:51,001 --> 00:07:53,250
But Lighthouse is a great
tool to help you get started

237
00:07:53,250 --> 00:07:55,971
and just say, hey, make sure you
do this, make sure you do this,

238
00:07:55,971 --> 00:07:58,470
and you have a bunch of things
you're doing great on so far.

239
00:07:58,470 --> 00:08:00,184
Good job.

240
00:08:00,184 --> 00:08:01,350
And finally, best practices.

241
00:08:01,350 --> 00:08:03,150
Don't use document.write.

242
00:08:03,150 --> 00:08:07,020
Make sure your anchors have
the proper opener if they're

243
00:08:07,020 --> 00:08:08,710
external sites,
that sort of thing.

244
00:08:08,710 --> 00:08:09,210
OK.

245
00:08:09,210 --> 00:08:10,835
So that's Lighthouse
and the extension.

246
00:08:10,835 --> 00:08:11,689
Super easy.

247
00:08:11,689 --> 00:08:13,230
I don't know why
anybody would want--

248
00:08:13,230 --> 00:08:14,870
ERIC BIDELMAN: So that's
a one-button press?

249
00:08:14,870 --> 00:08:14,940
BRENDAN KENNY: Yeah.

250
00:08:14,940 --> 00:08:15,420
ERIC BIDELMAN: You
get Lighthouse.

251
00:08:15,420 --> 00:08:16,961
You get a lot of
information in that.

252
00:08:16,961 --> 00:08:19,314
But what if-- like I'm
a power user, right?

253
00:08:19,314 --> 00:08:20,730
Maybe I want to
tweak some things.

254
00:08:20,730 --> 00:08:22,650
Maybe I want to change some
of the default settings

255
00:08:22,650 --> 00:08:23,340
in Lighthouse.

256
00:08:23,340 --> 00:08:24,307
What do you got for us?

257
00:08:24,307 --> 00:08:25,140
BRENDAN KENNY: Yeah.

258
00:08:25,140 --> 00:08:26,639
Well, it's funny
that you ask, Eric,

259
00:08:26,639 --> 00:08:28,540
because I have a
terminal back here--

260
00:08:28,540 --> 00:08:28,950
ERIC BIDELMAN: Oh, wow.

261
00:08:28,950 --> 00:08:30,699
BRENDAN KENNY: --just
for people like you.

262
00:08:30,699 --> 00:08:32,700
So Lighthouse is
also a CLI tool.

263
00:08:32,700 --> 00:08:36,406
And it's as simple as npm
install -g Lighthouse.

264
00:08:36,406 --> 00:08:37,780
And then we could
do Lighthouse--

265
00:08:37,780 --> 00:08:40,679


266
00:08:40,679 --> 00:08:44,039
test the same demo server.

267
00:08:44,039 --> 00:08:46,970
And then I'm going to add the
pro move of adding dash dash

268
00:08:46,970 --> 00:08:48,222
view to open up the report.

269
00:08:48,222 --> 00:08:49,680
But there's a bunch
of options here

270
00:08:49,680 --> 00:08:51,300
where you can also
do things like turn

271
00:08:51,300 --> 00:08:54,779
off network throttling,
emulate a different device,

272
00:08:54,779 --> 00:08:55,570
that sort of thing.

273
00:08:55,570 --> 00:08:56,850
ERIC BIDELMAN: So this is
just a little Node script.

274
00:08:56,850 --> 00:08:58,440
It's doing the exact
same thing as what

275
00:08:58,440 --> 00:08:59,030
the extension was doing.

276
00:08:59,030 --> 00:09:00,363
BRENDAN KENNY: Exact same thing.

277
00:09:00,363 --> 00:09:03,000
In the background here, you
can see Chrome is loaded

278
00:09:03,000 --> 00:09:05,530
and it's going, trying
to load the page.

279
00:09:05,530 --> 00:09:07,770
It's running a bunch
of audits and tests.

280
00:09:07,770 --> 00:09:10,629
And then boom, boom, you've
got the exact same report--

281
00:09:10,629 --> 00:09:11,670
ERIC BIDELMAN: Hey, cool.

282
00:09:11,670 --> 00:09:13,140
BRENDAN KENNY: --for a CLI tool.

283
00:09:13,140 --> 00:09:14,355
ERIC BIDELMAN: Very cool.

284
00:09:14,355 --> 00:09:14,490
OK.

285
00:09:14,490 --> 00:09:16,530
So Chrome extension,
that's a one-button press.

286
00:09:16,530 --> 00:09:18,664
I can run it on Command
Line, use it in Node

287
00:09:18,664 --> 00:09:19,830
if I'm in that environment--

288
00:09:19,830 --> 00:09:19,950
BRENDAN KENNY: Yeah.

289
00:09:19,950 --> 00:09:21,120
ERIC BIDELMAN:
--programmatically too,

290
00:09:21,120 --> 00:09:22,078
which we'll talk about.

291
00:09:22,078 --> 00:09:23,079
BRENDAN KENNY: Right.

292
00:09:23,079 --> 00:09:24,620
ERIC BIDELMAN: What
if I don't really

293
00:09:24,620 --> 00:09:25,730
want to install anything?

294
00:09:25,730 --> 00:09:26,210
BRENDAN KENNY: Yes.

295
00:09:26,210 --> 00:09:27,000
ERIC BIDELMAN: Is there
an even better way?

296
00:09:27,000 --> 00:09:28,270
I'm working in, you know--

297
00:09:28,270 --> 00:09:30,540
BRENDAN KENNY: Installing
things is a lot of work.

298
00:09:30,540 --> 00:09:32,480
So if you're a web
developer, and you already

299
00:09:32,480 --> 00:09:33,700
have Chrome Canary
installed, you

300
00:09:33,700 --> 00:09:35,200
might have heard
this week already--

301
00:09:35,200 --> 00:09:37,220
Paul Irish covered
this this morning--

302
00:09:37,220 --> 00:09:39,680
in Chrome Canary
right now, you already

303
00:09:39,680 --> 00:09:42,347
have Lighthouse in DevTools.

304
00:09:42,347 --> 00:09:44,180
So you open up DevTools
and you go over here

305
00:09:44,180 --> 00:09:45,440
to the Audits panel.

306
00:09:45,440 --> 00:09:47,540
And you can see,
here's Lighthouse.

307
00:09:47,540 --> 00:09:49,220
It's already installed for you.

308
00:09:49,220 --> 00:09:52,074
You can do this, run an
audit, and boom, there you go.

309
00:09:52,074 --> 00:09:54,240
ERIC BIDELMAN: That logo
follows you everywhere now.

310
00:09:54,240 --> 00:09:54,620
BRENDAN KENNY: Yeah.

311
00:09:54,620 --> 00:09:55,130
ERIC BIDELMAN: That's awesome.

312
00:09:55,130 --> 00:09:55,550
BRENDAN KENNY: Yeah.

313
00:09:55,550 --> 00:09:56,150
ERIC BIDELMAN: So same thing.

314
00:09:56,150 --> 00:09:58,180
Same open source project
is running in all three

315
00:09:58,180 --> 00:10:00,055
of these different
environments and baked now

316
00:10:00,055 --> 00:10:01,257
into the Chrome DevTools.

317
00:10:01,257 --> 00:10:02,090
BRENDAN KENNY: Yeah.

318
00:10:02,090 --> 00:10:03,740
So if you've ever felt like
contributing to DevTools,

319
00:10:03,740 --> 00:10:05,280
but it's a little
intimidating, just

320
00:10:05,280 --> 00:10:07,070
go contribute to
Lighthouse, and it'll

321
00:10:07,070 --> 00:10:08,420
get put right into DevTools.

322
00:10:08,420 --> 00:10:08,630
ERIC BIDELMAN: That's awesome.

323
00:10:08,630 --> 00:10:10,170
BRENDAN KENNY: And you too
can have code running there.

324
00:10:10,170 --> 00:10:10,640
Yeah.

325
00:10:10,640 --> 00:10:11,990
ERIC BIDELMAN: Everybody can
have code in DevTools now.

326
00:10:11,990 --> 00:10:12,832
BRENDAN KENNY: Yeah.

327
00:10:12,832 --> 00:10:13,790
ERIC BIDELMAN: Awesome.

328
00:10:13,790 --> 00:10:14,570
Thank you, Brendan.

329
00:10:14,570 --> 00:10:15,260
BRENDAN KENNY: OK.

330
00:10:15,260 --> 00:10:16,260
So let's switch back over to--

331
00:10:16,260 --> 00:10:17,930
ERIC BIDELMAN: Switch back
slides to talk about--

332
00:10:17,930 --> 00:10:19,388
BRENDAN KENNY:
Performance metrics.

333
00:10:19,388 --> 00:10:20,097
Those look fancy.

334
00:10:20,097 --> 00:10:20,929
ERIC BIDELMAN: Yeah.

335
00:10:20,929 --> 00:10:22,885
So you saw some of the
performance section

336
00:10:22,885 --> 00:10:25,010
in Lighthouse, which is
something we deeply, deeply

337
00:10:25,010 --> 00:10:25,550
care about.

338
00:10:25,550 --> 00:10:27,350
And many of you probably
care about it too.

339
00:10:27,350 --> 00:10:29,970
But let's face it, performance
is actually really hard.

340
00:10:29,970 --> 00:10:31,790
And it's hard to
maintain performance.

341
00:10:31,790 --> 00:10:33,680
Someone submits a pull
request or a developer

342
00:10:33,680 --> 00:10:34,970
comes in and changes
something, you

343
00:10:34,970 --> 00:10:36,511
don't know if your
app is still going

344
00:10:36,511 --> 00:10:40,342
to have that level of
performance that it once had.

345
00:10:40,342 --> 00:10:42,050
So there's some metrics
out there, right?

346
00:10:42,050 --> 00:10:44,216
You probably have heard of
things like window.onload

347
00:10:44,216 --> 00:10:45,350
and DOMContentLoaded.

348
00:10:45,350 --> 00:10:48,479
These are performance metrics,
traditional old-school metrics.

349
00:10:48,479 --> 00:10:50,270
Are these good things
we should be thinking

350
00:10:50,270 --> 00:10:52,790
about in 2017, Brendan?

351
00:10:52,790 --> 00:10:55,250
BRENDAN KENNY: Well,
it really depends.

352
00:10:55,250 --> 00:10:58,350
So maybe window.onload fires
about when your page is ready.

353
00:10:58,350 --> 00:11:01,790
But maybe you have a
server side render page

354
00:11:01,790 --> 00:11:03,440
and you bring in a
bunch of JavaScript

355
00:11:03,440 --> 00:11:05,705
and onload is actually
triggering the handlers that

356
00:11:05,705 --> 00:11:06,580
initialize your page.

357
00:11:06,580 --> 00:11:08,150
And it's going to be another
few seconds after that

358
00:11:08,150 --> 00:11:09,200
until your page is ready.

359
00:11:09,200 --> 00:11:11,450
So it's hard to say whether
window.onload really

360
00:11:11,450 --> 00:11:13,112
reflects when your site loads.

361
00:11:13,112 --> 00:11:15,320
ERIC BIDELMAN: So, again,
web development is complex.

362
00:11:15,320 --> 00:11:16,520
You don't know if you
should care about it or not.

363
00:11:16,520 --> 00:11:17,353
BRENDAN KENNY: Yeah.

364
00:11:17,353 --> 00:11:17,902
Right.

365
00:11:17,902 --> 00:11:20,360
ERIC BIDELMAN: What about-- so
Addy Osmani always tells me,

366
00:11:20,360 --> 00:11:22,375
reduce the size of
your JavaScript bundle.

367
00:11:22,375 --> 00:11:24,500
Especially for mobile, you
want to parse less code,

368
00:11:24,500 --> 00:11:25,580
you want to load less things.

369
00:11:25,580 --> 00:11:27,620
Is this something good or bad
that we should be considering?

370
00:11:27,620 --> 00:11:29,240
BRENDAN KENNY: Well, it's
generally great advice.

371
00:11:29,240 --> 00:11:30,656
The more JavaScript
you pull down,

372
00:11:30,656 --> 00:11:32,840
the longer it takes
to parse and eval.

373
00:11:32,840 --> 00:11:34,820
On the other hand,
sometimes it's a trade-off.

374
00:11:34,820 --> 00:11:38,300
Sometimes you want to go for a
little size increase for a much

375
00:11:38,300 --> 00:11:40,130
larger performance increase.

376
00:11:40,130 --> 00:11:42,556
Maybe you're bringing down
server-side rendered assets

377
00:11:42,556 --> 00:11:44,180
or maybe you're
pre-computing something

378
00:11:44,180 --> 00:11:46,080
that would take a long
time to do on a phone.

379
00:11:46,080 --> 00:11:47,540
So maybe a little
bit size increase

380
00:11:47,540 --> 00:11:48,790
isn't necessarily a bad thing.

381
00:11:48,790 --> 00:11:49,550
It's hard to know.

382
00:11:49,550 --> 00:11:50,630
It's hard to make
these trade-offs.

383
00:11:50,630 --> 00:11:52,130
ERIC BIDELMAN: It's
definitely hard to know.

384
00:11:52,130 --> 00:11:53,921
So one thing we're
focused on in Lighthouse

385
00:11:53,921 --> 00:11:57,800
is really raising the elevation
of these user performance,

386
00:11:57,800 --> 00:12:01,310
user-centric metrics, such as
First Paint, First Contentful

387
00:12:01,310 --> 00:12:03,440
Paint, First Meaningful
Paint, and a new one

388
00:12:03,440 --> 00:12:05,016
called Time To Interactive.

389
00:12:05,016 --> 00:12:06,890
These are really about
the user's experience,

390
00:12:06,890 --> 00:12:08,330
not just like window.onload.

391
00:12:08,330 --> 00:12:09,310
Are your images loaded?

392
00:12:09,310 --> 00:12:10,310
Are your scripts loaded?

393
00:12:10,310 --> 00:12:12,715
It's about what the user
perceives during this lifecycle

394
00:12:12,715 --> 00:12:14,146
of page load.

395
00:12:14,146 --> 00:12:15,770
So let's walk through
these in context.

396
00:12:15,770 --> 00:12:16,940
Do you want to take
a shot at these?

397
00:12:16,940 --> 00:12:17,773
BRENDAN KENNY: Sure.

398
00:12:17,773 --> 00:12:18,500
Yeah.

399
00:12:18,500 --> 00:12:21,391
Oh, yeah, fancy.

400
00:12:21,391 --> 00:12:21,890
Sure.

401
00:12:21,890 --> 00:12:23,420
You press Enter.

402
00:12:23,420 --> 00:12:25,100
You start navigating your page.

403
00:12:25,100 --> 00:12:27,740
And First Paint is really
when the first pixel

404
00:12:27,740 --> 00:12:28,820
changes on the screen.

405
00:12:28,820 --> 00:12:30,914
That could be a
background color.

406
00:12:30,914 --> 00:12:32,330
That could be
something like this,

407
00:12:32,330 --> 00:12:35,480
just like some vague structure.

408
00:12:35,480 --> 00:12:37,400
Next up is First
Contentful Paint.

409
00:12:37,400 --> 00:12:40,019
And that's when the actual first
content is drawn to screen.

410
00:12:40,019 --> 00:12:41,810
It might not be the
most important content,

411
00:12:41,810 --> 00:12:44,630
but something has actually
appeared in the DOM

412
00:12:44,630 --> 00:12:48,300
and been painted to the screen.

413
00:12:48,300 --> 00:12:50,070
So next up is First
Meaningful Paint,

414
00:12:50,070 --> 00:12:52,260
and that's an attempt
to actually measure what

415
00:12:52,260 --> 00:12:54,570
actually matters to the user.

416
00:12:54,570 --> 00:12:56,790
So maybe that's the
content of a story.

417
00:12:56,790 --> 00:12:59,660
Maybe that's the
search box that's

418
00:12:59,660 --> 00:13:02,010
the primary element of the page.

419
00:13:02,010 --> 00:13:04,374
Something that really
captures like, hey, as a user,

420
00:13:04,374 --> 00:13:06,540
I'm looking at this and
saying, OK, this is actually

421
00:13:06,540 --> 00:13:09,965
what I came to this site for.

422
00:13:09,965 --> 00:13:12,787
So next up is Visually Ready
and then Time to Interactive.

423
00:13:12,787 --> 00:13:14,870
So just because something
is painted on the screen

424
00:13:14,870 --> 00:13:16,286
doesn't mean it's
actually usable.

425
00:13:16,286 --> 00:13:19,190
So we've all been to sites
where everything is ready to go,

426
00:13:19,190 --> 00:13:20,600
and then you try
and do anything,

427
00:13:20,600 --> 00:13:23,030
and nothing happens because
the JavaScript is actually

428
00:13:23,030 --> 00:13:24,830
spinning in the background or
something is still loading.

429
00:13:24,830 --> 00:13:25,760
ERIC BIDELMAN: Or
you're typing the input

430
00:13:25,760 --> 00:13:26,480
and then it nukes the input.

431
00:13:26,480 --> 00:13:27,438
BRENDAN KENNY: Exactly.

432
00:13:27,438 --> 00:13:30,666
It just nukes it and then
you want to smash the screen.

433
00:13:30,666 --> 00:13:32,540
So Time to Interactive
tries to measure that.

434
00:13:32,540 --> 00:13:34,520
It's saying, OK,
everything's loaded.

435
00:13:34,520 --> 00:13:37,010
But now I'm going to look at
a bunch of activity that's

436
00:13:37,010 --> 00:13:37,560
going on.

437
00:13:37,560 --> 00:13:39,140
And when that calms
down, when it's actually

438
00:13:39,140 --> 00:13:41,900
able to respond to user input,
that's when Time to Interactive

439
00:13:41,900 --> 00:13:43,160
fires.

440
00:13:43,160 --> 00:13:44,834
And then finally,
you're finished.

441
00:13:44,834 --> 00:13:46,000
ERIC BIDELMAN: Fully loaded.

442
00:13:46,000 --> 00:13:46,220
BRENDAN KENNY: Yeah.

443
00:13:46,220 --> 00:13:46,790
ERIC BIDELMAN: Ready to go.

444
00:13:46,790 --> 00:13:47,623
BRENDAN KENNY: Yeah.

445
00:13:47,623 --> 00:13:48,960
ERIC BIDELMAN: Cool.

446
00:13:48,960 --> 00:13:51,547
BRENDAN KENNY: And so this
puts the performance part

447
00:13:51,547 --> 00:13:53,880
of the Lighthouse report into
a little more perspective.

448
00:13:53,880 --> 00:13:56,850
You can see all those
metrics kind of put

449
00:13:56,850 --> 00:13:59,040
into context with the page load.

450
00:13:59,040 --> 00:14:01,950
And you can see,
as the page loads,

451
00:14:01,950 --> 00:14:05,080
really early on, that page has
the full layout of the page.

452
00:14:05,080 --> 00:14:07,957
But Time to Interactive
doesn't fire for quite a while.

453
00:14:07,957 --> 00:14:09,540
ERIC BIDELMAN: That
JavaScript bundle.

454
00:14:09,540 --> 00:14:09,850
BRENDAN KENNY: Yeah.

455
00:14:09,850 --> 00:14:10,160
ERIC BIDELMAN: It's too big.

456
00:14:10,160 --> 00:14:10,740
BRENDAN KENNY:
It's pretty rough.

457
00:14:10,740 --> 00:14:12,199
ERIC BIDELMAN: We
also have targets

458
00:14:12,199 --> 00:14:14,531
for each of these, where we
think you should be hitting.

459
00:14:14,531 --> 00:14:15,910
So that's really
important, too--

460
00:14:15,910 --> 00:14:15,990
BRENDAN KENNY: Yeah.

461
00:14:15,990 --> 00:14:18,510
ERIC BIDELMAN: --considering
what the metric is

462
00:14:18,510 --> 00:14:19,910
that you should be targeting.

463
00:14:19,910 --> 00:14:20,460
OK.

464
00:14:20,460 --> 00:14:22,680
So let's say I'm a developer.

465
00:14:22,680 --> 00:14:25,980
I want to integrate
with Lighthouse.

466
00:14:25,980 --> 00:14:28,590
Maybe I'm already tracking
performance metrics

467
00:14:28,590 --> 00:14:30,840
and I want to zest in
my performance metrics

468
00:14:30,840 --> 00:14:33,120
with those awesome metrics
that we just talked about

469
00:14:33,120 --> 00:14:34,370
that Lighthouse is giving you.

470
00:14:34,370 --> 00:14:35,203
BRENDAN KENNY: Yeah.

471
00:14:35,203 --> 00:14:37,320
Phil and [INAUDIBLE] gave
a great talk yesterday,

472
00:14:37,320 --> 00:14:38,857
web performance
something something.

473
00:14:38,857 --> 00:14:40,440
ERIC BIDELMAN: It's
a very long title.

474
00:14:40,440 --> 00:14:43,020
BRENDAN KENNY: And they
talked a lot about how

475
00:14:43,020 --> 00:14:44,030
these are great metrics.

476
00:14:44,030 --> 00:14:46,559
It's really useful to be
user-centered and think

477
00:14:46,559 --> 00:14:48,600
about the user experience,
but you know your site

478
00:14:48,600 --> 00:14:51,760
better than any heuristic does.

479
00:14:51,760 --> 00:14:54,330
And so if you can go out
and measure the exact moment

480
00:14:54,330 --> 00:14:56,460
that your hero element's
ready, then you

481
00:14:56,460 --> 00:14:57,946
should absolutely do it.

482
00:14:57,946 --> 00:15:00,570
ERIC BIDELMAN: So we can do that
by writing a custom audit that

483
00:15:00,570 --> 00:15:02,271
plugs into Lighthouse.

484
00:15:02,271 --> 00:15:02,770
OK.

485
00:15:02,770 --> 00:15:05,340
So before we do this, let's
just get this out of the way,

486
00:15:05,340 --> 00:15:07,673
probably the most boring part
of the presentation, which

487
00:15:07,673 --> 00:15:09,735
is a little bit of
terminology and architecture.

488
00:15:09,735 --> 00:15:10,840
Is that OK, Brendan?

489
00:15:10,840 --> 00:15:11,310
BRENDAN KENNY: Yeah.

490
00:15:11,310 --> 00:15:12,270
You get to do the boring part.

491
00:15:12,270 --> 00:15:14,061
ERIC BIDELMAN: Should
I do the boring part?

492
00:15:14,061 --> 00:15:14,610
OK.

493
00:15:14,610 --> 00:15:16,568
So in order to understand
how Lighthouse works,

494
00:15:16,568 --> 00:15:19,000
you kind of have to understand
how things are set up.

495
00:15:19,000 --> 00:15:21,900
The first is, we're just
a bunch of Node code,

496
00:15:21,900 --> 00:15:24,530
and that's the Lighthouse
portion at the top there.

497
00:15:24,530 --> 00:15:26,280
On top of that, we
actually just interface

498
00:15:26,280 --> 00:15:29,220
with Chrome and the
Chrome DevTools protocol.

499
00:15:29,220 --> 00:15:31,200
Its a really
awesome set of APIs.

500
00:15:31,200 --> 00:15:33,660
Essentially, anything
that DevTools can do,

501
00:15:33,660 --> 00:15:34,810
the API can do, as well.

502
00:15:34,810 --> 00:15:36,030
So its super
powerful, and this is

503
00:15:36,030 --> 00:15:37,696
how we're going to
interface with Chrome

504
00:15:37,696 --> 00:15:39,204
and write a custom audit.

505
00:15:39,204 --> 00:15:40,620
So we have this
Lighthouse runner.

506
00:15:40,620 --> 00:15:43,387
That's the controller
for Lighthouse.

507
00:15:43,387 --> 00:15:45,220
And in this, there's
three different things.

508
00:15:45,220 --> 00:15:46,980
The first is gatherers.

509
00:15:46,980 --> 00:15:50,100
Gatherers are basically just
things that collect information

510
00:15:50,100 --> 00:15:51,210
from the page.

511
00:15:51,210 --> 00:15:54,330
So in some cases, we actually
inject JavaScript on the page

512
00:15:54,330 --> 00:15:55,980
to evaluate
something, and that's

513
00:15:55,980 --> 00:15:58,140
what the gatherers are doing.

514
00:15:58,140 --> 00:15:59,920
And as you saw in
Brendan's demo,

515
00:15:59,920 --> 00:16:01,440
Lighthouse actually
reloads the page

516
00:16:01,440 --> 00:16:02,910
a couple of different times.

517
00:16:02,910 --> 00:16:05,490
And that's why we have a couple
of different gatherer passes

518
00:16:05,490 --> 00:16:06,570
here, because we
have to do things

519
00:16:06,570 --> 00:16:08,861
like cut off the network,
make sure your service worker

520
00:16:08,861 --> 00:16:11,674
actually serves
something offline,

521
00:16:11,674 --> 00:16:14,340
just a bunch of other stuff like
that that we need separate runs

522
00:16:14,340 --> 00:16:15,590
for.

523
00:16:15,590 --> 00:16:19,110
So gatherers interface with
Chrome through this little shim

524
00:16:19,110 --> 00:16:20,680
that we created
called the driver.

525
00:16:20,680 --> 00:16:22,980
And that talks to
DevTools Protocol.

526
00:16:22,980 --> 00:16:25,202
So we're built on
the stack of giants.

527
00:16:25,202 --> 00:16:27,160
Everything below us is
just DevTools in Chrome.

528
00:16:27,160 --> 00:16:27,600
BRENDAN KENNY: Yeah.

529
00:16:27,600 --> 00:16:28,840
DevTools Protocol
is pretty amazing.

530
00:16:28,840 --> 00:16:30,930
You can basically do
anything you want in Chrome

531
00:16:30,930 --> 00:16:32,430
through the DevTools
Protocol, which

532
00:16:32,430 --> 00:16:35,442
means that Lighthouse can do
anything you'd need it to do.

533
00:16:35,442 --> 00:16:36,900
ERIC BIDELMAN:
Lighthouse fires up,

534
00:16:36,900 --> 00:16:39,060
it connects to Chrome,
it opens in Chrome,

535
00:16:39,060 --> 00:16:41,790
and then starts running the
page and testing things.

536
00:16:41,790 --> 00:16:44,730
So when gatherers are done,
they return artifacts.

537
00:16:44,730 --> 00:16:48,210
Artifacts then are
handed off to an audit.

538
00:16:48,210 --> 00:16:50,370
An audit is basically
just a pass or fail

539
00:16:50,370 --> 00:16:52,710
check or something
that applies scoring.

540
00:16:52,710 --> 00:16:54,240
So in the report,
you see scores,

541
00:16:54,240 --> 00:16:57,480
and you see a check and
an x if you did bad.

542
00:16:57,480 --> 00:16:58,950
Those are what audits are doing.

543
00:16:58,950 --> 00:17:01,860
They're returning and
evaluating these things.

544
00:17:01,860 --> 00:17:05,490
That hands off just a big
JSON blob of all the data.

545
00:17:05,490 --> 00:17:08,010
And then we go into
report generation.

546
00:17:08,010 --> 00:17:10,558
And so report is basically
just categorizing these things.

547
00:17:10,558 --> 00:17:12,099
Here's the Progressive
WebEx section.

548
00:17:12,099 --> 00:17:15,520
Here is the Accessibility
section, so on and so forth.

549
00:17:15,520 --> 00:17:18,270
So gathering, auditing, and
report generation, and that

550
00:17:18,270 --> 00:17:20,519
gets you a Lighthouse report.

551
00:17:20,519 --> 00:17:21,560
BRENDAN KENNY: All right.

552
00:17:21,560 --> 00:17:23,420
ERIC BIDELMAN: Pretty simple.

553
00:17:23,420 --> 00:17:25,129
So with that, we're
all on the same page.

554
00:17:25,129 --> 00:17:25,961
BRENDAN KENNY: Yeah.

555
00:17:25,961 --> 00:17:27,980
ERIC BIDELMAN: We could
write a custom audit.

556
00:17:27,980 --> 00:17:28,880
BRENDAN KENNY: So yeah,
this isn't something

557
00:17:28,880 --> 00:17:30,885
that we emphasized
a lot before this,

558
00:17:30,885 --> 00:17:32,260
but actually since
the beginning,

559
00:17:32,260 --> 00:17:35,540
we've written Lighthouse
to be super extensible.

560
00:17:35,540 --> 00:17:37,495
And you could write a
plugin really easily

561
00:17:37,495 --> 00:17:38,870
because, in many
ways, Lighthouse

562
00:17:38,870 --> 00:17:41,690
is just a really
nice test runner

563
00:17:41,690 --> 00:17:44,390
with a bunch of functions
already built for those tests

564
00:17:44,390 --> 00:17:47,720
to make difficult
things pretty easy.

565
00:17:47,720 --> 00:17:49,610
So as Eric was saying,
there's three steps,

566
00:17:49,610 --> 00:17:51,276
and we're going to
do all three of these

567
00:17:51,276 --> 00:17:52,580
to write our own thing.

568
00:17:52,580 --> 00:17:53,780
So this is that demo page.

569
00:17:53,780 --> 00:17:56,042


570
00:17:56,042 --> 00:17:58,500
ERIC BIDELMAN: Do you want me
to switch to the demo screen?

571
00:17:58,500 --> 00:18:00,330
Do you want to show
the metric that we're--

572
00:18:00,330 --> 00:18:01,580
BRENDAN KENNY: Oh, yeah, yeah.

573
00:18:01,580 --> 00:18:02,967
So yeah, so let's switch over.

574
00:18:02,967 --> 00:18:04,800
ERIC BIDELMAN: So the
developer of this page

575
00:18:04,800 --> 00:18:06,960
is actually already
thinking about performance.

576
00:18:06,960 --> 00:18:07,120
BRENDAN KENNY: Yeah.

577
00:18:07,120 --> 00:18:08,745
They already feel
really guilty that it

578
00:18:08,745 --> 00:18:11,470
takes six seconds for that
search box to start working.

579
00:18:11,470 --> 00:18:14,280
And so they did the basics
that they could start with.

580
00:18:14,280 --> 00:18:17,130
And they're logging how
long it takes to do that.

581
00:18:17,130 --> 00:18:19,770
And so we can actually open
up DevTools here and go over

582
00:18:19,770 --> 00:18:20,790
to the console.

583
00:18:20,790 --> 00:18:24,184
And you can see that they are
logging this in the console.

584
00:18:24,184 --> 00:18:25,350
ERIC BIDELMAN: Five seconds.

585
00:18:25,350 --> 00:18:26,340
BRENDAN KENNY: Just
so they can feel guilt

586
00:18:26,340 --> 00:18:27,423
every time the page loads.

587
00:18:27,423 --> 00:18:29,970
Five seconds, not very
fast for a search box.

588
00:18:29,970 --> 00:18:31,970
And they're also saving
it to a global variable.

589
00:18:31,970 --> 00:18:33,060
They could send this anywhere.

590
00:18:33,060 --> 00:18:35,130
They could send it to analytics
or something like that.

591
00:18:35,130 --> 00:18:37,171
But we're going to do the
simplest possible thing

592
00:18:37,171 --> 00:18:40,020
and just set it to a global
variable name, Site Metrics.

593
00:18:40,020 --> 00:18:42,430
And in Site Metrics is a
property named Searchable Time.

594
00:18:42,430 --> 00:18:46,020
So it's the time it takes to
get to a searchable state.

595
00:18:46,020 --> 00:18:48,640
It's about 5,000 milliseconds.

596
00:18:48,640 --> 00:18:49,140
OK.

597
00:18:49,140 --> 00:18:52,020
So we know that that global
variable is in the page.

598
00:18:52,020 --> 00:18:54,179
And we want to use
Lighthouse to retrieve that.

599
00:18:54,179 --> 00:18:55,845
So let's switch back
over to the slides.

600
00:18:55,845 --> 00:18:59,590


601
00:18:59,590 --> 00:19:04,940
And so step 1, we need to
gather that global variable.

602
00:19:04,940 --> 00:19:08,650
So in Lighthouse, every gatherer
extends from a gatherer base

603
00:19:08,650 --> 00:19:09,190
class.

604
00:19:09,190 --> 00:19:11,539
And that just sets
things up for you.

605
00:19:11,539 --> 00:19:13,330
And then there's several
lifecycle methods,

606
00:19:13,330 --> 00:19:16,150
which correspond to
during a page load,

607
00:19:16,150 --> 00:19:18,700
when you want to
run, gather, or code.

608
00:19:18,700 --> 00:19:21,340
So the first stage is
called before pass,

609
00:19:21,340 --> 00:19:23,240
and that's before
the page loads.

610
00:19:23,240 --> 00:19:25,510
It runs and it can
set things up or set

611
00:19:25,510 --> 00:19:27,800
some sort of throttling
up or something like that.

612
00:19:27,800 --> 00:19:29,133
But in this case, we don't care.

613
00:19:29,133 --> 00:19:30,680
We just want that
global variable.

614
00:19:30,680 --> 00:19:32,500
So instead, we go to after pass.

615
00:19:32,500 --> 00:19:34,540
So after pass fires.

616
00:19:34,540 --> 00:19:37,300
After the page is fully loaded,
everything's settled down,

617
00:19:37,300 --> 00:19:39,190
nothing seems to
be loading anymore,

618
00:19:39,190 --> 00:19:40,985
Lighthouse calls
after pass from us.

619
00:19:40,985 --> 00:19:42,610
And in this case,
all we're going to do

620
00:19:42,610 --> 00:19:46,185
is get the driver, which talks
to the debugger protocol.

621
00:19:46,185 --> 00:19:48,310
And then there's a bunch
of helper methods on there

622
00:19:48,310 --> 00:19:50,390
to make a lot of things easy.

623
00:19:50,390 --> 00:19:52,120
And one of them
is evaluateAsync.

624
00:19:52,120 --> 00:19:54,760
And evaluateAsync just runs
this JavaScript snippet

625
00:19:54,760 --> 00:19:57,040
in the context of the
page and then returns

626
00:19:57,040 --> 00:19:58,480
whatever that result is.

627
00:19:58,480 --> 00:19:59,740
ERIC BIDELMAN: So that's
that same variable

628
00:19:59,740 --> 00:20:00,460
that we saw in the console.

629
00:20:00,460 --> 00:20:01,880
BRENDAN KENNY: It's the
same exact variable.

630
00:20:01,880 --> 00:20:04,520
In fact, it's exactly the
string that we ran in DevTools

631
00:20:04,520 --> 00:20:05,724
Console, window.sitemetrics.

632
00:20:05,724 --> 00:20:07,140
And just like in
the console, it's

633
00:20:07,140 --> 00:20:09,977
going to return that object
with property searchable time.

634
00:20:09,977 --> 00:20:10,810
ERIC BIDELMAN: Cool.

635
00:20:10,810 --> 00:20:11,620
BRENDAN KENNY: So
in this case, we're

636
00:20:11,620 --> 00:20:13,480
just going to return
the results of that.

637
00:20:13,480 --> 00:20:15,580
And Lighthouse will take
that and bundle it up

638
00:20:15,580 --> 00:20:19,300
as our artifact
from this gatherer.

639
00:20:19,300 --> 00:20:21,970
And it'll just use the same name
as the gatherer-- site metrics

640
00:20:21,970 --> 00:20:22,469
gatherer.

641
00:20:22,469 --> 00:20:24,310
That will be the
name of the artifact.

642
00:20:24,310 --> 00:20:26,650
So now let's go on
to the next stage

643
00:20:26,650 --> 00:20:29,080
and actually audit our results.

644
00:20:29,080 --> 00:20:30,790
So just like
gatherers, every audit

645
00:20:30,790 --> 00:20:33,160
extends from the
audit base class.

646
00:20:33,160 --> 00:20:35,260
And then audit needs a
little more bookkeeping.

647
00:20:35,260 --> 00:20:36,635
They have this
meta object, which

648
00:20:36,635 --> 00:20:39,360
tells Lighthouse what to do
with this, how to categorize it.

649
00:20:39,360 --> 00:20:40,810
When it puts it
into a report, it

650
00:20:40,810 --> 00:20:43,600
tells what help text,
what description to use,

651
00:20:43,600 --> 00:20:45,910
to tell your users,
like how to fix

652
00:20:45,910 --> 00:20:47,330
this or something like that.

653
00:20:47,330 --> 00:20:50,440
But the most important thing is
this required artifacts there.

654
00:20:50,440 --> 00:20:51,940
And that tells
Lighthouse, hey, I'm

655
00:20:51,940 --> 00:20:54,314
going to need the artifact
from the gatherer stage, named

656
00:20:54,314 --> 00:20:56,690
SiteMetricsGatherer.

657
00:20:56,690 --> 00:21:00,120
So every audit has
an audit method.

658
00:21:00,120 --> 00:21:02,130
And that's called
with our artifacts.

659
00:21:02,130 --> 00:21:05,460
And in the artifacts is our
SiteMetricsGatherer artifact.

660
00:21:05,460 --> 00:21:07,290
And just like in the
DevTools Console,

661
00:21:07,290 --> 00:21:09,260
there's a property
named searchableTime.

662
00:21:09,260 --> 00:21:11,010
So we're going to get
that searchableTime.

663
00:21:11,010 --> 00:21:13,410
And then our audit there
at the bottom is just,

664
00:21:13,410 --> 00:21:16,290
is it less than four seconds?

665
00:21:16,290 --> 00:21:18,990
And if it's below
four seconds, we pass.

666
00:21:18,990 --> 00:21:20,580
If it's above four
seconds, we fail

667
00:21:20,580 --> 00:21:23,310
and we get a big red x
in our Lighthouse report.

668
00:21:23,310 --> 00:21:24,680
And that's an audit.

669
00:21:24,680 --> 00:21:25,380
Super simple.

670
00:21:25,380 --> 00:21:27,296
ERIC BIDELMAN: And you
just chose four seconds

671
00:21:27,296 --> 00:21:28,290
because, hey, why not?

672
00:21:28,290 --> 00:21:31,110
BRENDAN KENNY: Well, it seems
like a reasonable thing.

673
00:21:31,110 --> 00:21:33,000
Come on, it should
work in four seconds.

674
00:21:33,000 --> 00:21:34,600
ERIC BIDELMAN: It should have
an input before four seconds.

675
00:21:34,600 --> 00:21:36,030
BRENDAN KENNY: Yeah.

676
00:21:36,030 --> 00:21:40,200
So the last thing we need to
do is make a configuration file

677
00:21:40,200 --> 00:21:43,110
for Lighthouse to tell it
how to find a gatherer,

678
00:21:43,110 --> 00:21:45,390
how to find an audit,
and how to run them.

679
00:21:45,390 --> 00:21:47,280
So just like
something like ESLint,

680
00:21:47,280 --> 00:21:50,700
you can extend from the
default Lighthouse run.

681
00:21:50,700 --> 00:21:53,061
And that just tells it, hey,
run all the normal passes

682
00:21:53,061 --> 00:21:54,810
and audits and gatherers
that you normally

683
00:21:54,810 --> 00:21:58,140
do so that my
gatherer or my audit

684
00:21:58,140 --> 00:22:00,870
can be in the same context
and the same report

685
00:22:00,870 --> 00:22:03,010
as all the rest.

686
00:22:03,010 --> 00:22:05,734
So as Eric was saying, we
have this concept of passes.

687
00:22:05,734 --> 00:22:07,900
This is the number of times
that we reload the page.

688
00:22:07,900 --> 00:22:10,441
And we want to say, let's put
our gatherer-- our site metrics

689
00:22:10,441 --> 00:22:12,730
gatherer-- into
the default pass,

690
00:22:12,730 --> 00:22:16,140
the first pass of Lighthouse.

691
00:22:16,140 --> 00:22:18,300
Let's add our load audit
to the list of audits

692
00:22:18,300 --> 00:22:22,110
that Lighthouse runs in
the default configuration.

693
00:22:22,110 --> 00:22:24,420
And then finally, let's make
a category in the report

694
00:22:24,420 --> 00:22:25,960
just for our site.

695
00:22:25,960 --> 00:22:27,720
We're going to call
it My Site Metrics,

696
00:22:27,720 --> 00:22:29,970
because that's the best name
we apparently can come up

697
00:22:29,970 --> 00:22:30,150
with for our presentation.

698
00:22:30,150 --> 00:22:31,065
ERIC BIDELMAN: Very descriptive.

699
00:22:31,065 --> 00:22:31,350
BRENDAN KENNY: Yeah.

700
00:22:31,350 --> 00:22:32,683
ERIC BIDELMAN: Very descriptive.

701
00:22:32,683 --> 00:22:35,350
BRENDAN KENNY: And
we're going to say, hey,

702
00:22:35,350 --> 00:22:36,460
have this audit in there.

703
00:22:36,460 --> 00:22:38,010
And if there were
more audits, they

704
00:22:38,010 --> 00:22:39,468
would be averaged
together, and you

705
00:22:39,468 --> 00:22:42,490
can add a nice weight so you
get a nice weighted average.

706
00:22:42,490 --> 00:22:42,990
OK.

707
00:22:42,990 --> 00:22:47,100
So we have a pre-recorded video.

708
00:22:47,100 --> 00:22:49,931
So for this thing,
you can do yarn start.

709
00:22:49,931 --> 00:22:51,180
You can see what it's running.

710
00:22:51,180 --> 00:22:52,130
It's Lighthouse.

711
00:22:52,130 --> 00:22:55,560
It passes the config
path to it and the URL.

712
00:22:55,560 --> 00:22:56,310
It's running.

713
00:22:56,310 --> 00:22:56,937
It's running.

714
00:22:56,937 --> 00:22:58,770
ERIC BIDELMAN: So this
is running Lighthouse

715
00:22:58,770 --> 00:23:00,000
with all the stuff that--

716
00:23:00,000 --> 00:23:00,710
BRENDAN KENNY:
Normal Lighthouse.

717
00:23:00,710 --> 00:23:01,350
ERIC BIDELMAN:
--comes by default.

718
00:23:01,350 --> 00:23:02,670
BRENDAN KENNY: But then,
if we scroll all the way

719
00:23:02,670 --> 00:23:05,040
down to the bottom, you
can see My Site Metrics.

720
00:23:05,040 --> 00:23:05,970
Amazing.

721
00:23:05,970 --> 00:23:08,040
And you can see that
six seconds for this run

722
00:23:08,040 --> 00:23:08,957
and it totally failed.

723
00:23:08,957 --> 00:23:10,123
ERIC BIDELMAN: We failed it.

724
00:23:10,123 --> 00:23:12,340
BRENDAN KENNY: We got a
zero on My Site Metrics.

725
00:23:12,340 --> 00:23:13,960
And now you can say
like, oh, well--

726
00:23:13,960 --> 00:23:15,210
ERIC BIDELMAN: That's awesome.

727
00:23:15,210 --> 00:23:16,680
BRENDAN KENNY: --we
really need to do better.

728
00:23:16,680 --> 00:23:17,440
So this is great.

729
00:23:17,440 --> 00:23:20,670
We can run any audit
we want that we

730
00:23:20,670 --> 00:23:23,430
can write and have it
available for our site,

731
00:23:23,430 --> 00:23:24,514
particularly for our site.

732
00:23:24,514 --> 00:23:25,304
ERIC BIDELMAN: Yep.

733
00:23:25,304 --> 00:23:27,810
BRENDAN KENNY: And so we can
know when we're doing terrible.

734
00:23:27,810 --> 00:23:30,870
But if only there
was a way-- oh, wait.

735
00:23:30,870 --> 00:23:31,387
Oh, yeah.

736
00:23:31,387 --> 00:23:32,470
There's a nice slide for--

737
00:23:32,470 --> 00:23:33,840
ERIC BIDELMAN: This
is the command, yeah.

738
00:23:33,840 --> 00:23:34,770
BRENDAN KENNY: But if
only there was a way

739
00:23:34,770 --> 00:23:37,140
that we could automate
it so that I don't have

740
00:23:37,140 --> 00:23:39,630
to run Lighthouse every time.

741
00:23:39,630 --> 00:23:41,561
I could just have a
machine check it for me.

742
00:23:41,561 --> 00:23:42,560
That would be the ideal.

743
00:23:42,560 --> 00:23:44,500


744
00:23:44,500 --> 00:23:45,750
ERIC BIDELMAN: We can do that.

745
00:23:45,750 --> 00:23:46,664
BRENDAN KENNY: Oh,
we can do that.

746
00:23:46,664 --> 00:23:46,880
Oh, thank you.

747
00:23:46,880 --> 00:23:47,830
ERIC BIDELMAN: Yeah,
we can do that.

748
00:23:47,830 --> 00:23:48,340
That's not a problem.

749
00:23:48,340 --> 00:23:49,090
BRENDAN KENNY: OK.

750
00:23:49,090 --> 00:23:50,131
ERIC BIDELMAN: All right.

751
00:23:50,131 --> 00:23:51,959
So you can use Lighthouse
programmatically,

752
00:23:51,959 --> 00:23:53,750
and people often kind
of forget about this.

753
00:23:53,750 --> 00:23:54,840
They come to us
and they say, hey,

754
00:23:54,840 --> 00:23:56,547
can you add this
feature to Lighthouse

755
00:23:56,547 --> 00:23:57,630
or can you add this audit?

756
00:23:57,630 --> 00:23:59,840
And we're like, well,
we're just Node.

757
00:23:59,840 --> 00:24:02,640
You can write a program
that uses Lighthouse any way

758
00:24:02,640 --> 00:24:04,290
you want.

759
00:24:04,290 --> 00:24:07,380
So Lighthouse is just one
require statement away always.

760
00:24:07,380 --> 00:24:09,250
Keep that in mind.

761
00:24:09,250 --> 00:24:11,037
So a cool example
of this, we'll just

762
00:24:11,037 --> 00:24:12,870
write a couple of lines
of code and show you

763
00:24:12,870 --> 00:24:16,366
how to use Lighthouse from
Node or for some JavaScript.

764
00:24:16,366 --> 00:24:18,240
The first thing you do
is require Lighthouse.

765
00:24:18,240 --> 00:24:19,674
That's no big deal.

766
00:24:19,674 --> 00:24:21,090
We have this
ChromeLauncher that's

767
00:24:21,090 --> 00:24:22,830
part of Lighthouse's codebase.

768
00:24:22,830 --> 00:24:24,330
And that basically
just is the thing

769
00:24:24,330 --> 00:24:27,997
that launches Chrome with
a debugger port open.

770
00:24:27,997 --> 00:24:30,330
It does things like find
Chrome on your machine, selects

771
00:24:30,330 --> 00:24:32,034
Canary or Stable Channel.

772
00:24:32,034 --> 00:24:34,700
BRENDAN KENNY: It turns off some
background processes so that it

773
00:24:34,700 --> 00:24:36,060
traces a little cleaner.

774
00:24:36,060 --> 00:24:38,990
It's not trying to download
dictionary items or something.

775
00:24:38,990 --> 00:24:39,210
ERIC BIDELMAN: Yeah.

776
00:24:39,210 --> 00:24:40,380
It turns off some
Chrome features

777
00:24:40,380 --> 00:24:42,030
that you don't need when
you're running Lighthouse.

778
00:24:42,030 --> 00:24:43,071
So we're just using that.

779
00:24:43,071 --> 00:24:46,266
We're just going to import that
and launch Chrome that way.

780
00:24:46,266 --> 00:24:48,390
So I'm going to write a
little helper method called

781
00:24:48,390 --> 00:24:49,779
launchChromeAndRunLighthouse.

782
00:24:49,779 --> 00:24:51,320
And I'm going to
use async and await.

783
00:24:51,320 --> 00:24:53,281
But you can totally use
promises if you want.

784
00:24:53,281 --> 00:24:53,905
I just wanted--

785
00:24:53,905 --> 00:24:54,230
BRENDAN KENNY: Async.

786
00:24:54,230 --> 00:24:54,910
Yeah, wow.

787
00:24:54,910 --> 00:24:56,130
You're like from the future.

788
00:24:56,130 --> 00:24:57,463
ERIC BIDELMAN: The future, yeah.

789
00:24:57,463 --> 00:24:59,521
But it keeps the code
a little cleaner.

790
00:24:59,521 --> 00:25:01,020
So this method is
just going to take

791
00:25:01,020 --> 00:25:02,550
the URL that we want to test.

792
00:25:02,550 --> 00:25:04,410
This is the page
we want to test.

793
00:25:04,410 --> 00:25:06,210
It's going to take a
flags object, if we

794
00:25:06,210 --> 00:25:08,640
want to pass any
flags to Lighthouse,

795
00:25:08,640 --> 00:25:12,030
and also a placeholder for
the configuration file, if we

796
00:25:12,030 --> 00:25:14,370
have the custom config that
Brendan just showed you

797
00:25:14,370 --> 00:25:16,009
how to write.

798
00:25:16,009 --> 00:25:18,300
So in this method, the first
thing you do, no surprise,

799
00:25:18,300 --> 00:25:19,680
is just launch Chrome.

800
00:25:19,680 --> 00:25:21,900
ChromeLauncher.launch
is the method you call

801
00:25:21,900 --> 00:25:24,000
and that returns a promise.

802
00:25:24,000 --> 00:25:25,800
And then when Chrome
selects the port,

803
00:25:25,800 --> 00:25:27,600
we basically just
stash that port.

804
00:25:27,600 --> 00:25:29,730
And we're going to forward
that on to Lighthouse.

805
00:25:29,730 --> 00:25:30,990
So Chrome is launched.

806
00:25:30,990 --> 00:25:33,900
It's found it, set it up for
us, and then we actually just

807
00:25:33,900 --> 00:25:34,800
run Lighthouse.

808
00:25:34,800 --> 00:25:37,790
And this is also going
to return a promise.

809
00:25:37,790 --> 00:25:39,960
And when Lighthouse
returns, we give it the URL,

810
00:25:39,960 --> 00:25:42,350
and it's going to give
us a bunch of JSON.

811
00:25:42,350 --> 00:25:45,000
So we'll just forward on the
URL, the flags and the config

812
00:25:45,000 --> 00:25:46,779
right to Lighthouse.

813
00:25:46,779 --> 00:25:48,570
Once we have the results,
we're good to go.

814
00:25:48,570 --> 00:25:49,370
We can kill Chrome.

815
00:25:49,370 --> 00:25:52,830
And now basically just shut
Chrome down using chrome.kill,

816
00:25:52,830 --> 00:25:56,662
and then we'll return the
results to the caller.

817
00:25:56,662 --> 00:25:58,370
And the way you use
this method, you just

818
00:25:58,370 --> 00:26:00,710
call
launchChromeAndRunLighthouse.

819
00:26:00,710 --> 00:26:02,480
You give it the URL
you want to test.

820
00:26:02,480 --> 00:26:04,610
So example.com in this case.

821
00:26:04,610 --> 00:26:07,520
And we're specifying that
we want the results in JSON,

822
00:26:07,520 --> 00:26:10,820
rather than the default
HTML file you get.

823
00:26:10,820 --> 00:26:13,020
And then you can use the
results any way you want.

824
00:26:13,020 --> 00:26:15,270
BRENDAN KENNY: Yeah, that
way you can test against it.

825
00:26:15,270 --> 00:26:17,320
ERIC BIDELMAN: Use any of
your CI or whatever you want.

826
00:26:17,320 --> 00:26:18,990
So all in all, like
12 lines of code.

827
00:26:18,990 --> 00:26:22,451
Not too hard to use
Lighthouse, programmatically.

828
00:26:22,451 --> 00:26:23,950
And that's exactly
what we're doing.

829
00:26:23,950 --> 00:26:26,190
If you've joined us
over at the mobile web

830
00:26:26,190 --> 00:26:28,347
sandbox during the
show, and apologize

831
00:26:28,347 --> 00:26:30,180
for the live streamers
who haven't had that.

832
00:26:30,180 --> 00:26:32,910
We do have a nice little
video of the big Lighthouse

833
00:26:32,910 --> 00:26:34,350
over in the sandbox area.

834
00:26:34,350 --> 00:26:36,090
It's just using
Lighthouse in Node,

835
00:26:36,090 --> 00:26:37,950
and it's using
the Hue Lights API

836
00:26:37,950 --> 00:26:40,500
to control the lights
based on the score you

837
00:26:40,500 --> 00:26:42,540
get when you run a URL.

838
00:26:42,540 --> 00:26:43,590
So a quick demo of this.

839
00:26:43,590 --> 00:26:46,320
This is the big Lighthouse,
where I put in a URL.

840
00:26:46,320 --> 00:26:49,040
I think it was like
chromestatus.com or something.

841
00:26:49,040 --> 00:26:50,225
And Chrome status is a PWA.

842
00:26:50,225 --> 00:26:51,460
It does pretty well.

843
00:26:51,460 --> 00:26:53,619
And it changes the color
of it to light green.

844
00:26:53,619 --> 00:26:55,410
BRENDAN KENNY: Come
over and try your site,

845
00:26:55,410 --> 00:26:57,810
and you can get a very
satisfying green glow

846
00:26:57,810 --> 00:26:58,530
or, you know.

847
00:26:58,530 --> 00:26:59,400
ERIC BIDELMAN: Or red or--

848
00:26:59,400 --> 00:26:59,880
BRENDAN KENNY: Yeah, with
that little foghorn--

849
00:26:59,880 --> 00:27:00,730
ERIC BIDELMAN: --orange.

850
00:27:00,730 --> 00:27:01,780
BRENDAN KENNY: --to show you.

851
00:27:01,780 --> 00:27:02,730
ERIC BIDELMAN: There
are some surprises.

852
00:27:02,730 --> 00:27:03,460
BRENDAN KENNY: Could improve.

853
00:27:03,460 --> 00:27:05,626
ERIC BIDELMAN: So if you
want to check out the code,

854
00:27:05,626 --> 00:27:08,769
that's on GitHub under that URL
there for the big Lighthouse.

855
00:27:08,769 --> 00:27:10,560
Another other thing
people often want to do

856
00:27:10,560 --> 00:27:14,920
is integrate with GitHub and
pull requests in Travis, right?

857
00:27:14,920 --> 00:27:17,650
A lot of us are doing
development work on there.

858
00:27:17,650 --> 00:27:19,939
And so you can do that,
as well, using Lighthouse.

859
00:27:19,939 --> 00:27:21,480
You basically want
this little beacon

860
00:27:21,480 --> 00:27:23,120
of light following
you wherever you go.

861
00:27:23,120 --> 00:27:25,620
BRENDAN KENNY: Yeah, you want
Lighthouse watching your back.

862
00:27:25,620 --> 00:27:26,210
ERIC BIDELMAN:
Watching your back.

863
00:27:26,210 --> 00:27:27,240
BRENDAN KENNY: A little
Lighthouse telling you

864
00:27:27,240 --> 00:27:28,470
good job or--

865
00:27:28,470 --> 00:27:29,820
ERIC BIDELMAN: So you want to
know, if somebody sends you

866
00:27:29,820 --> 00:27:31,350
a pull request, if
your performance

867
00:27:31,350 --> 00:27:33,630
or your Lighthouse
score is going to drop.

868
00:27:33,630 --> 00:27:36,000
And so we have a demo of
this as a proof of concept

869
00:27:36,000 --> 00:27:37,620
this is totally doable.

870
00:27:37,620 --> 00:27:40,366
What I have here is a
pull request on the left.

871
00:27:40,366 --> 00:27:42,740
I don't know what it does,
don't care, because Lighthouse

872
00:27:42,740 --> 00:27:43,860
is going to help me.

873
00:27:43,860 --> 00:27:46,362
On the right, Travis is just
going to do its normal thing.

874
00:27:46,362 --> 00:27:48,570
It's going to build this
pull request, run my linting

875
00:27:48,570 --> 00:27:50,610
scripts, run my Gulp stuff.

876
00:27:50,610 --> 00:27:52,080
So as that's
happening, we'll just

877
00:27:52,080 --> 00:27:54,294
see that log output go through.

878
00:27:54,294 --> 00:27:56,460
We'll check out and see
what this pull request does.

879
00:27:56,460 --> 00:27:58,120
We'll look at the changes.

880
00:27:58,120 --> 00:27:59,730
Let's pop over and see.

881
00:27:59,730 --> 00:28:02,310
So there's a script tag.

882
00:28:02,310 --> 00:28:05,430
It's loading JQuery,
which that's OK, I guess.

883
00:28:05,430 --> 00:28:08,130
But there's like this delay
thing and this seconds thing

884
00:28:08,130 --> 00:28:09,300
and it looks scary.

885
00:28:09,300 --> 00:28:10,050
BRENDAN KENNY: It
wastes seven seconds.

886
00:28:10,050 --> 00:28:10,950
Yeah, it seems
like an odd choice.

887
00:28:10,950 --> 00:28:11,250
ERIC BIDELMAN: It
looks questionable.

888
00:28:11,250 --> 00:28:12,210
BRENDAN KENNY: Yeah.

889
00:28:12,210 --> 00:28:14,200
ERIC BIDELMAN: So let's
let Lighthouse decide.

890
00:28:14,200 --> 00:28:15,575
I don't know if
it's good or bad,

891
00:28:15,575 --> 00:28:19,046
but let's determine
that through magic.

892
00:28:19,046 --> 00:28:21,420
So we're building the PR, and
what's going to happen here

893
00:28:21,420 --> 00:28:23,730
is that after this is
done, our little helper

894
00:28:23,730 --> 00:28:26,280
script is basically going
to send these changes--

895
00:28:26,280 --> 00:28:27,570
the pull request changes--

896
00:28:27,570 --> 00:28:31,020
to my staging server and
deploy it to a staging URL.

897
00:28:31,020 --> 00:28:33,330
And then Lighthouse is
going to go test that URL,

898
00:28:33,330 --> 00:28:36,930
return the results, and then
modify the pull request.

899
00:28:36,930 --> 00:28:38,930
So if we do that, you can
see this little helper

900
00:28:38,930 --> 00:28:41,320
script called run Lighthouse
is testing the URL,

901
00:28:41,320 --> 00:28:43,420
and I have set a
minimum score of 96.

902
00:28:43,420 --> 00:28:45,070
I want to get a 96
or above in order

903
00:28:45,070 --> 00:28:47,260
to pass this pull request.

904
00:28:47,260 --> 00:28:50,260
And eventually, when all
this stuff comes back,

905
00:28:50,260 --> 00:28:52,630
Lighthouse will finish auditing
the pull request changes

906
00:28:52,630 --> 00:28:55,450
and tell me that, uh-oh,
this is not a good change.

907
00:28:55,450 --> 00:28:57,010
Hashtag I promise
this is not going

908
00:28:57,010 --> 00:28:58,970
to hurt your performance
was not true, it turns out.

909
00:28:58,970 --> 00:29:00,053
BRENDAN KENNY: It's a lot.

910
00:29:00,053 --> 00:29:03,495
ERIC BIDELMAN: So I've got a 93
out of 96, and I wanted a 96.

911
00:29:03,495 --> 00:29:04,870
BRENDAN KENNY:
Thanks Lighthouse.

912
00:29:04,870 --> 00:29:06,640
ERIC BIDELMAN: Thanks
Lighthouse, yeah.

913
00:29:06,640 --> 00:29:09,359
So this is really
very simple to set up.

914
00:29:09,359 --> 00:29:11,650
We have some example code if
you want to check that out

915
00:29:11,650 --> 00:29:12,999
at the top there.

916
00:29:12,999 --> 00:29:14,290
Again, it's just normal Travis.

917
00:29:14,290 --> 00:29:16,007
So do everything
you're normally doing,

918
00:29:16,007 --> 00:29:17,590
like building your
scripts and linting

919
00:29:17,590 --> 00:29:19,120
and all that good stuff.

920
00:29:19,120 --> 00:29:21,830
And then the magic
comes in after success.

921
00:29:21,830 --> 00:29:23,530
And so I have a
little shell script

922
00:29:23,530 --> 00:29:26,050
that deploys the pull
request to App Engine.

923
00:29:26,050 --> 00:29:29,440
But if you're using Firebase
or some other server,

924
00:29:29,440 --> 00:29:33,040
then you can choose how
to deploy your own stuff.

925
00:29:33,040 --> 00:29:36,820
And then there's this example,
run Lighthouse JavaScript file.

926
00:29:36,820 --> 00:29:39,040
And that basically just
fires off Lighthouse,

927
00:29:39,040 --> 00:29:41,680
tests it on a headless version
of Chrome in the cloud,

928
00:29:41,680 --> 00:29:43,550
and then returns the score.

929
00:29:43,550 --> 00:29:45,970
I'm passing two
environment variables here,

930
00:29:45,970 --> 00:29:48,850
the score that I want
to achieve and the URL

931
00:29:48,850 --> 00:29:49,770
that I want to test.

932
00:29:49,770 --> 00:29:51,520
And in this case, it's
that staging server

933
00:29:51,520 --> 00:29:54,084
URL on App Engine.

934
00:29:54,084 --> 00:29:56,500
So that's how you use Lighthouse
and get that little light

935
00:29:56,500 --> 00:30:00,210
everywhere on GitHub and Travis.

936
00:30:00,210 --> 00:30:04,370
Another thing that just actually
happened was Chrome launched

937
00:30:04,370 --> 00:30:06,500
headless mode in--
that guy likes it--

938
00:30:06,500 --> 00:30:07,700
in Chrome 59.

939
00:30:07,700 --> 00:30:11,450
So brand-new stuff and very
cool for automated testing.

940
00:30:11,450 --> 00:30:13,340
If you fire up Chrome
from the Command Line,

941
00:30:13,340 --> 00:30:16,010
you can pass the
--headless flag.

942
00:30:16,010 --> 00:30:18,380
And that'll start Chrome,
essentially without Chrome.

943
00:30:18,380 --> 00:30:21,116
So it's great for
headless testing, Travis,

944
00:30:21,116 --> 00:30:22,490
automated
environments, where you

945
00:30:22,490 --> 00:30:23,800
don't need a full UI of Chrome.

946
00:30:23,800 --> 00:30:25,579
You just want to do
some browser testing.

947
00:30:25,579 --> 00:30:27,620
You can do some cool stuff
from the Command Line.

948
00:30:27,620 --> 00:30:29,030
You can take a screenshot.

949
00:30:29,030 --> 00:30:32,630
You can create a PDF, if
that's your cup of tea.

950
00:30:32,630 --> 00:30:34,130
You can dump the
DOM, so essentially

951
00:30:34,130 --> 00:30:37,460
just kind of curl the page
and get the HTML of the page.

952
00:30:37,460 --> 00:30:39,350
There's also a Command
Line flag for setting

953
00:30:39,350 --> 00:30:41,474
the window size, which is
kind of convenient if you

954
00:30:41,474 --> 00:30:45,810
want to scale down to a
mobile device, for instance.

955
00:30:45,810 --> 00:30:48,080
So if you want to use headless
Chrome with Lighthouse,

956
00:30:48,080 --> 00:30:49,310
you can totally do that.

957
00:30:49,310 --> 00:30:51,650
We talked about the
ChromeLauncher module

958
00:30:51,650 --> 00:30:53,307
that we have in the
Lighthouse source.

959
00:30:53,307 --> 00:30:54,890
You basically just
create the launcher

960
00:30:54,890 --> 00:30:57,890
and when you launch it, you pass
in an additional flag called

961
00:30:57,890 --> 00:30:58,905
chromeFlags.

962
00:30:58,905 --> 00:31:00,530
And these are just
normal Chrome flags.

963
00:31:00,530 --> 00:31:02,960
So anything you want
to launch Chrome with,

964
00:31:02,960 --> 00:31:03,950
you can pass it there.

965
00:31:03,950 --> 00:31:06,260
And we'll just pass
the --headless flag.

966
00:31:06,260 --> 00:31:09,717
So really easy to use
Lighthouse with headless Chrome.

967
00:31:09,717 --> 00:31:10,550
BRENDAN KENNY: Yeah.

968
00:31:10,550 --> 00:31:12,840
ERIC BIDELMAN: Yeah.

969
00:31:12,840 --> 00:31:13,650
All right.

970
00:31:13,650 --> 00:31:14,700
So that's a lot of stuff.

971
00:31:14,700 --> 00:31:15,370
I'm kind of tired.

972
00:31:15,370 --> 00:31:16,665
I'm a little sleepy from lunch.

973
00:31:16,665 --> 00:31:18,870
BRENDAN KENNY: Oh, that lion
is yawning, it's not roaring?

974
00:31:18,870 --> 00:31:20,040
ERIC BIDELMAN: Yeah,
he's not scared.

975
00:31:20,040 --> 00:31:20,400
BRENDAN KENNY: I see.

976
00:31:20,400 --> 00:31:21,566
ERIC BIDELMAN: He's yawning.

977
00:31:21,566 --> 00:31:22,502
Yeah.

978
00:31:22,502 --> 00:31:24,960
So with that, let's just kind
of recap what we talked about

979
00:31:24,960 --> 00:31:26,370
before we close out here.

980
00:31:26,370 --> 00:31:28,380
Basically, if you're
building on the web,

981
00:31:28,380 --> 00:31:31,290
this is your web app, OK?

982
00:31:31,290 --> 00:31:32,917
You don't want to be that guy.

983
00:31:32,917 --> 00:31:34,500
You definitely want
to use Lighthouse.

984
00:31:34,500 --> 00:31:36,157
Test, continuously
test, integrate.

985
00:31:36,157 --> 00:31:37,740
It's really, really
awesome, and we're

986
00:31:37,740 --> 00:31:39,720
trying to make
Lighthouse as friendly

987
00:31:39,720 --> 00:31:41,280
and user friendly as possible.

988
00:31:41,280 --> 00:31:43,196
Don't forget about this
useful tool that could

989
00:31:43,196 --> 00:31:45,842
have helped you not do that.

990
00:31:45,842 --> 00:31:46,800
Do you want to remind--

991
00:31:46,800 --> 00:31:47,745
BRENDAN KENNY: Oh, sure, yeah.

992
00:31:47,745 --> 00:31:49,290
So everywhere that you
can run Lighthouse.

993
00:31:49,290 --> 00:31:51,206
Lighthouse is available
as a Chrome extension.

994
00:31:51,206 --> 00:31:53,010
You can go install
it from Web Store.

995
00:31:53,010 --> 00:31:53,970
Super easy.

996
00:31:53,970 --> 00:31:57,390
Easy to use, easy
to drop in anytime.

997
00:31:57,390 --> 00:32:02,820
Lighthouse is available as
a node module and CLI tool.

998
00:32:02,820 --> 00:32:06,330
We just shipped the newest
version of Lighthouse to NPM.

999
00:32:06,330 --> 00:32:08,517
So if you want to try
out the newest version

1000
00:32:08,517 --> 00:32:10,600
and find lots of bugs for
us, that would be great.

1001
00:32:10,600 --> 00:32:11,850
ERIC BIDELMAN: And there's a
bunch of Command Line flags

1002
00:32:11,850 --> 00:32:13,230
here that we didn't
talk about that you

1003
00:32:13,230 --> 00:32:14,640
can use to tweak Lighthouse.

1004
00:32:14,640 --> 00:32:16,500
BRENDAN KENNY: Yeah, you can
block specific resources,

1005
00:32:16,500 --> 00:32:17,750
you can change the throttling.

1006
00:32:17,750 --> 00:32:20,460
You can do all sorts
of customization

1007
00:32:20,460 --> 00:32:23,985
that you wouldn't be able
to do with the extension.

1008
00:32:23,985 --> 00:32:26,380
One thing we didn't talk
about is Web Page Test.

1009
00:32:26,380 --> 00:32:30,296
So Web Page Test is obviously
a super popular tool

1010
00:32:30,296 --> 00:32:31,920
that people use to
test their websites.

1011
00:32:31,920 --> 00:32:33,614
It has a great way
to share reports

1012
00:32:33,614 --> 00:32:34,780
after you're done with them.

1013
00:32:34,780 --> 00:32:37,602
So Web Page Test actually has
Lighthouse integrated into it.

1014
00:32:37,602 --> 00:32:39,060
If you go down,
you can see there's

1015
00:32:39,060 --> 00:32:41,460
a Lighthouse checkbox there.

1016
00:32:41,460 --> 00:32:43,680
You click that, and then
at the top of your report,

1017
00:32:43,680 --> 00:32:46,530
your Lighthouse report
score will appear.

1018
00:32:46,530 --> 00:32:48,660
And you can click that and
see the full Lighthouse

1019
00:32:48,660 --> 00:32:50,160
report available.

1020
00:32:50,160 --> 00:32:52,360
Super easy to share.

1021
00:32:52,360 --> 00:32:55,380
It's available
right now, actually.

1022
00:32:55,380 --> 00:32:58,470
And then, as a couple of people
have mentioned throughout I/O,

1023
00:32:58,470 --> 00:33:01,590
it's available now in Chrome
DevTools, in Canary, right now.

1024
00:33:01,590 --> 00:33:03,870
You can go try it
out and see what

1025
00:33:03,870 --> 00:33:07,950
your score is anytime as long
as you have Canary installed.

1026
00:33:07,950 --> 00:33:08,450
OK.

1027
00:33:08,450 --> 00:33:10,470
So that's where
we are right now.

1028
00:33:10,470 --> 00:33:11,254
Eric, what's next?

1029
00:33:11,254 --> 00:33:12,420
ERIC BIDELMAN: I don't know.

1030
00:33:12,420 --> 00:33:14,640
What is next?

1031
00:33:14,640 --> 00:33:15,380
What is next?

1032
00:33:15,380 --> 00:33:15,890
BRENDAN KENNY: There
are some slides.

1033
00:33:15,890 --> 00:33:16,530
They'll help.

1034
00:33:16,530 --> 00:33:17,280
ERIC BIDELMAN: There
are some slides.

1035
00:33:17,280 --> 00:33:18,696
So one thing we
want to do is kind

1036
00:33:18,696 --> 00:33:21,210
of be wherever developers are.

1037
00:33:21,210 --> 00:33:24,510
So another place that you
often go to is HTTPArchive,

1038
00:33:24,510 --> 00:33:26,277
and they have a slew
of data on the web.

1039
00:33:26,277 --> 00:33:28,360
They run against, I don't
know, tens of thousands,

1040
00:33:28,360 --> 00:33:31,500
hundreds of thousands
URLs, and basically

1041
00:33:31,500 --> 00:33:35,170
have all this interesting data
and surface that publicly.

1042
00:33:35,170 --> 00:33:37,170
They're considering
integrating with Lighthouse.

1043
00:33:37,170 --> 00:33:38,544
So pretty soon,
hopefully, you'll

1044
00:33:38,544 --> 00:33:41,250
be able to see how many URLs
out there are Progressive Web

1045
00:33:41,250 --> 00:33:43,110
Apps, what are their
accessibility scores

1046
00:33:43,110 --> 00:33:45,810
and their performance scores
and best practice scores?

1047
00:33:45,810 --> 00:33:47,893
And so that's what they
were pretty excited about,

1048
00:33:47,893 --> 00:33:50,690
because then you can see the
shape of the web over time.

1049
00:33:50,690 --> 00:33:52,440
Another one that I
want give a shoutout to

1050
00:33:52,440 --> 00:33:55,080
is Calibre, which is an awesome
online performance testing

1051
00:33:55,080 --> 00:33:55,634
tool.

1052
00:33:55,634 --> 00:33:57,300
And they're integrating
with Lighthouse.

1053
00:33:57,300 --> 00:33:59,850
You can actually get Lighthouse
results in this tool.

1054
00:33:59,850 --> 00:34:02,860
And you can see their
scores, PWA, best practices,

1055
00:34:02,860 --> 00:34:04,667
same Lighthouse stuff.

1056
00:34:04,667 --> 00:34:06,000
So they're consuming Lighthouse.

1057
00:34:06,000 --> 00:34:08,250
And then you can actually
track your performance

1058
00:34:08,250 --> 00:34:12,710
over time, which is a
really awesome UI for that.

1059
00:34:12,710 --> 00:34:14,781
On the roadmap for
Lighthouse itself,

1060
00:34:14,781 --> 00:34:16,239
there's just a ton
of stuff we want

1061
00:34:16,239 --> 00:34:18,380
to do that we haven't
had time to do yet.

1062
00:34:18,380 --> 00:34:19,370
A lot of new audits.

1063
00:34:19,370 --> 00:34:21,080
We could test anything
really, and we'd

1064
00:34:21,080 --> 00:34:22,454
love to have your
help, actually,

1065
00:34:22,454 --> 00:34:24,199
contribute some of those audits.

1066
00:34:24,199 --> 00:34:29,460
JS code coverage, whether you're
using CSS selectors or not.

1067
00:34:29,460 --> 00:34:30,600
SEO best practices.

1068
00:34:30,600 --> 00:34:32,641
There are a lot of things
you have to think about

1069
00:34:32,641 --> 00:34:34,520
in order to work with crawlers.

1070
00:34:34,520 --> 00:34:35,639
UX.

1071
00:34:35,639 --> 00:34:37,219
Are you popping up
in interstitial?

1072
00:34:37,219 --> 00:34:39,336
Can you scroll the
page at 60 FPS?

1073
00:34:39,336 --> 00:34:41,210
These are really good
things that we can just

1074
00:34:41,210 --> 00:34:43,070
automate using
Lighthouse and tell you

1075
00:34:43,070 --> 00:34:47,750
if you're doing them well or
tell you if you can improve.

1076
00:34:47,750 --> 00:34:49,280
Security and some other ones.

1077
00:34:49,280 --> 00:34:50,654
And there's also
a bunch of stuff

1078
00:34:50,654 --> 00:34:52,350
we want to do on the
core team, as well.

1079
00:34:52,350 --> 00:34:55,777
So what happens after page
load for single-page apps?

1080
00:34:55,777 --> 00:34:57,610
Maybe you have an app
behind a login screen,

1081
00:34:57,610 --> 00:34:58,520
maybe there are
some things you want

1082
00:34:58,520 --> 00:35:00,430
to test after the
page loads, and you

1083
00:35:00,430 --> 00:35:02,170
use Lighthouse for that.

1084
00:35:02,170 --> 00:35:02,972
Faster auditing.

1085
00:35:02,972 --> 00:35:04,430
Just make the whole
process faster.

1086
00:35:04,430 --> 00:35:06,950
As we add more stuff, obviously,
it's going to get slower.

1087
00:35:06,950 --> 00:35:09,380
So we want to make it
as fast as possible.

1088
00:35:09,380 --> 00:35:11,860
More integrations, and
also making it a lot easier

1089
00:35:11,860 --> 00:35:13,490
for folks to contribute.

1090
00:35:13,490 --> 00:35:15,740
Brendan showed you today how
to create a custom audit,

1091
00:35:15,740 --> 00:35:20,090
but we can make that
probably even easier.

1092
00:35:20,090 --> 00:35:21,350
So the good stuff is--

1093
00:35:21,350 --> 00:35:23,570
I'm going to throw this up
for just a brief moment.

1094
00:35:23,570 --> 00:35:25,160
If you want to get
Lighthouse on NPM,

1095
00:35:25,160 --> 00:35:27,440
you can NPM install Lighthouse.

1096
00:35:27,440 --> 00:35:30,470
We have extensive documentation
for reference material

1097
00:35:30,470 --> 00:35:32,420
for all of the
audits that we have

1098
00:35:32,420 --> 00:35:35,110
up on developers.google.com.

1099
00:35:35,110 --> 00:35:37,070
And if you want to
write your own audit

1100
00:35:37,070 --> 00:35:39,410
to work with Lighthouse,
you can check out

1101
00:35:39,410 --> 00:35:41,720
the DevTools protocol
reference, which is really good.

1102
00:35:41,720 --> 00:35:43,424
It's got all the
APIs there that you

1103
00:35:43,424 --> 00:35:45,590
can learn how to actually
use the DevTools protocol.

1104
00:35:45,590 --> 00:35:46,550
BRENDAN KENNY: Crazy
amount of information

1105
00:35:46,550 --> 00:35:49,520
you can get from the browser
and a crazy number of things

1106
00:35:49,520 --> 00:35:52,470
you can do to the browser.

1107
00:35:52,470 --> 00:35:54,470
We also have something
in the GitHub repo,

1108
00:35:54,470 --> 00:35:56,610
if the custom [? model ?]
thing went too fast,

1109
00:35:56,610 --> 00:35:58,700
we have some great
recipes in there

1110
00:35:58,700 --> 00:36:00,470
that you can copy
and paste to get

1111
00:36:00,470 --> 00:36:02,570
started with scripting
Lighthouse and doing

1112
00:36:02,570 --> 00:36:04,177
your own thing.

1113
00:36:04,177 --> 00:36:05,010
ERIC BIDELMAN: Yeah.

1114
00:36:05,010 --> 00:36:05,740
Very cool.

1115
00:36:05,740 --> 00:36:07,240
So Brendan and I are the
ones talking to you today

1116
00:36:07,240 --> 00:36:08,260
about Lighthouse,
but I do want to give

1117
00:36:08,260 --> 00:36:10,630
a quick shoutout to the rest
of the Lighthouse keepers.

1118
00:36:10,630 --> 00:36:12,964
We have some people that
are working internally

1119
00:36:12,964 --> 00:36:14,380
at Google on this,
on the DevTools

1120
00:36:14,380 --> 00:36:16,010
team on Developer Relations.

1121
00:36:16,010 --> 00:36:18,404
But also, we have some folks
in the community that are

1122
00:36:18,404 --> 00:36:19,570
helping us build Lighthouse.

1123
00:36:19,570 --> 00:36:21,130
So it's not just
a Google project.

1124
00:36:21,130 --> 00:36:23,260
We have a ton of help
from the outside, too.

1125
00:36:23,260 --> 00:36:25,870
So hopefully, you can
come in and help us out

1126
00:36:25,870 --> 00:36:26,980
build some stuff.

1127
00:36:26,980 --> 00:36:28,690
So a shoutout to the
Lighthouse keepers.

1128
00:36:28,690 --> 00:36:30,700
And with that, my
name is Eric Bidelman,

1129
00:36:30,700 --> 00:36:33,830
this is Brendan Kenny, and don't
forget about four underscores.

1130
00:36:33,830 --> 00:36:35,330
That's really important.

1131
00:36:35,330 --> 00:36:36,310
Thanks, guys.

1132
00:36:36,310 --> 00:36:37,510
[APPLAUSE]

1133
00:36:37,510 --> 00:36:41,460
[MUSIC PLAYING]

1134
00:36:41,460 --> 00:36:52,744


